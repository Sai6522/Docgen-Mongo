const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');

class EmailService {
  constructor() {
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    // Verify connection configuration
    this.transporter.verify((error, success) => {
      if (error) {
        console.error('Email service configuration error:', error);
      } else {
        console.log('Email service is ready to send messages');
      }
    });
  }

  // Send document via email
  async sendDocument(recipientEmail, recipientName, documentInfo, templateName, senderName) {
    try {
      const mailOptions = {
        from: {
          name: 'DocGen System',
          address: process.env.EMAIL_USER
        },
        to: recipientEmail,
        subject: `Your ${templateName} Document`,
        html: this.generateEmailTemplate(recipientName, templateName, senderName),
        attachments: [
          {
            filename: documentInfo.fileName,
            path: documentInfo.filePath
          }
        ]
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('Email sent successfully:', result.messageId);
      
      return {
        success: true,
        messageId: result.messageId
      };

    } catch (error) {
      console.error('Email sending error:', error);
      throw error;
    }
  }

  // Send bulk documents
  async sendBulkDocuments(documents, templateName, senderName) {
    const results = [];
    
    for (const doc of documents) {
      try {
        if (doc.recipientEmail) {
          const result = await this.sendDocument(
            doc.recipientEmail,
            doc.recipientName,
            doc.documentInfo,
            templateName,
            senderName
          );
          
          results.push({
            recipientEmail: doc.recipientEmail,
            success: true,
            messageId: result.messageId
          });
        }
      } catch (error) {
        results.push({
          recipientEmail: doc.recipientEmail,
          success: false,
          error: error.message
        });
      }
    }

    return results;
  }

  // Generate email template
  generateEmailTemplate(recipientName, templateName, senderName) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document Delivery</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            background-color: #4f46e5;
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 8px 8px 0 0;
          }
          .content {
            background-color: #f9fafb;
            padding: 30px;
            border-radius: 0 0 8px 8px;
          }
          .footer {
            text-align: center;
            margin-top: 20px;
            padding: 20px;
            background-color: #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            color: #6b7280;
          }
          .button {
            display: inline-block;
            background-color: #4f46e5;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 6px;
            margin: 20px 0;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Document Delivery</h1>
        </div>
        
        <div class="content">
          <h2>Hello ${recipientName},</h2>
          
          <p>We hope this email finds you well.</p>
          
          <p>Please find your <strong>${templateName}</strong> document attached to this email. This document has been generated specifically for you and contains important information.</p>
          
          <p><strong>Document Details:</strong></p>
          <ul>
            <li>Document Type: ${templateName}</li>
            <li>Generated On: ${new Date().toLocaleDateString()}</li>
            <li>Generated By: ${senderName}</li>
          </ul>
          
          <p>If you have any questions or need assistance, please don't hesitate to contact us.</p>
          
          <p>Best regards,<br>
          <strong>DocGen System</strong></p>
        </div>
        
        <div class="footer">
          <p>This is an automated email from DocGen System. Please do not reply to this email.</p>
          <p>Generated on ${new Date().toLocaleString()}</p>
        </div>
      </body>
      </html>
    `;
  }

  // Send notification email to admin/HR
  async sendNotificationEmail(recipientEmail, subject, message) {
    try {
      const mailOptions = {
        from: {
          name: 'DocGen System',
          address: process.env.EMAIL_USER
        },
        to: recipientEmail,
        subject: subject,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #4f46e5;">${subject}</h2>
            <p>${message}</p>
            <hr>
            <p style="font-size: 12px; color: #666;">
              This is an automated notification from DocGen System.<br>
              Generated on ${new Date().toLocaleString()}
            </p>
          </div>
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      return { success: true, messageId: result.messageId };

    } catch (error) {
      console.error('Notification email error:', error);
      throw error;
    }
  }

  // Test email configuration
  async testEmailConfiguration() {
    try {
      const testMail = {
        from: process.env.EMAIL_USER,
        to: process.env.EMAIL_USER,
        subject: 'DocGen Email Test',
        text: 'This is a test email from DocGen system.'
      };

      const result = await this.transporter.sendMail(testMail);
      return { success: true, messageId: result.messageId };

    } catch (error) {
      console.error('Email test failed:', error);
      return { success: false, error: error.message };
    }
  }
}

module.exports = new EmailService();
